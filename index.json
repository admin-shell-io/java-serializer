{
  "articles/building.html": {
    "href": "articles/building.html",
    "title": "Building | java-serializer Documentation",
    "keywords": "Building You can download and build the repository by yourself by following these steps: Clone the GitHub repository: git clone https://github.com/admin-shell-io/java-serializer.git Use Maven to build the project mvn clean package OR use Maven to build and install the artifacts in your local Maven repository mvn clean install Note If the project is built locally, the artifact version is set to the revision variable in the pom.xml in the project root folder. <revision>1.1.0</revision> <model.version>${revision}</model.version> If you change the version of your local built, the model.version is also set to the updated artifact version from the java-model project. For the same version number, both artifacts are compatible."
  },
  "articles/development_workflow.html": {
    "href": "articles/development_workflow.html",
    "title": "Development Workflow | java-serializer Documentation",
    "keywords": "Development Workflow We develop with Github using pull requests (see this Github guide for a short introduction). Development branch. The development branch is always development . Expect changes on this branch from time to time. Releases. The releases mark the development milestones on the main branch with a certain feature completeness. Pull Requests Feature branches. We develop using the feature branches, see this section of the Git book . We use feature/'feature-name' and bugfix/'bugfix-name' as a naming convention. If you are a member of the development team, create a feature branch directly within the repository. Otherwise, if you are a non-member contributor, fork the repository and create the feature branch in your forked repository. See this Github tuturial for more guidance. Branch Prefix. Each PullRequest must contained a list of the changed topics, for instance as a list of bulletpoints. Simply refering to the commit messages is not sufficient. Reviews. Each PullRequest is reviewed by the Maintainers of the project. In order to simplify the workflow, please assign the PullRequest directly to the Maintainer you think is most knowledgable about your changes. CI Workflows There are three workflows that will automatically handle specific events for the repository: Pull requests on one of the branches mentioned above will trigger CI actions that will automatically check, if all tests pass successfully Additionally, new commits on main will build the release artifacts and publish them on Maven Central The documentation found in /docs is automatically build with docFX and published to gh-pages, when a new release is pushed to the main branch Commit Messages The commit messages should follow the guidelines from https://chris.beams.io/posts/git-commit : Separate subject from body with a blank line Limit the subject line to 50 characters Capitalize the subject line Do not end the subject line with a period Use the imperative mood in the subject line Wrap the body at 72 characters Use the body to explain what and why (instead of how)"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Introduction | java-serializer Documentation",
    "keywords": "Introduction The AAS Java Dataformat Library is a collection of software modules to serialize and deserialze instances of the Asset Administration Shell from and to Java instances. De-/serialization works according to the dataformat schemas published in the document 'Details of the Asset Administration Shell', published on www.plattform-i40.de . The serialization library and all its modules depend on the Java implementation for the metamodel from the project java-model . Project Structure The project contains several modules: dataformat-parent Maven parent module that contains the respective de-/serializers for the different data formats. dataformat-core Location of the general classes and interfaces that are used by more than one de-/serializer. dataformat-aasx AASX de-/serializer dataformat-json JSON de-/serializer dataformat-xml XML de-/serializer dataformat-uanodeset OPC UA I4AAS NodeSet de-/serializer"
  },
  "articles/releasing.html": {
    "href": "articles/releasing.html",
    "title": "Versioning | java-serializer Documentation",
    "keywords": "Versioning We version using semantic versioning (e.g., 1.0.4 ). The first position indicates the major release. Different major releases canvas contain breaking changes and are not necessarily compliant. The second number indicates the minor releas or revision, which contains new features compared to an older revision. The last position is used for hotfixes or bugfixes. Note, that the versioning scheme of this project is not directly aligned with the release process of the metamodel! For instance, the version 1.0.3 targets the metamodel version 3.0.RC02"
  },
  "articles/usage.html": {
    "href": "articles/usage.html",
    "title": "Usage | java-serializer Documentation",
    "keywords": "Usage The library and its modules are released at Maven Central. Thus, you can use the respective serializers in your Java Maven project by adding the following dependency: <dependency> <groupId>io.admin-shell.aas</groupId> <artifactId>dataformat-**serializer**</artifactId> <version>**version**</version> <dependency> For example, uses the following dependency declaration to embed the JSON dataformat : <dependency> <groupId>io.admin-shell.aas</groupId> <artifactId>dataformat-json</artifactId> <version>1.1.1</version> <dependency> Note Maven will automatically resolve the dependencies of the library and therefore also include the model implementation from the java-model project. Serialization The library supports serialization of an AAS environment to a File , OutputStream or String . See the following interface to get more details on what methods can be used to serialize an environment: https://github.com/admin-shell-io/java-serializer/blob/main/dataformat-core/src/main/java/io/adminshell/aas/v3/dataformat/Serializer.java Here is a small example on how to serialize a given environment to a JSON- String : AssetAdministrationShellEnvironment env = ...; String serializedEnvironment = new JsonSerializer().write(env); Deserialization Likewise, you can deserialize an AAS environment from a File , InputStream or String . See the following interface to get more details on what methods can be used to deserialize an environment: https://github.com/admin-shell-io/java-serializer/blob/main/dataformat-core/src/main/java/io/adminshell/aas/v3/dataformat/Deserializer.java Here is a small example on how to deserialize a given JSON- String and draw some information out of the returned model: String serializedEnvironment = \"...\"; AssetAdministrationShellEnvironment env = new JsonDeserializer().read(serializedEnvironment); List<AssetAdministrationShell> aasList = env.getAssetAdministrationShells(); aasList.forEach(aas -> System.out.println(\"Environment contains AAS: \" + aas.getIdShort())); AASX In order to be able to also embed files into a serialized environment, it is possible to create an .aasx-package. The AASX module makes use of the xml-dataformat to handle the AASEnvironment . byte[] fileContent = ...; AssetAdministrationShellEnvironment env = ...; InMemoryFile file = new InMemoryFile(fileContent, \"aasx/MyFile.pdf\"); List<InMemoryFile> fileList = new ArrayList<>() fileList.add(file); ByteArrayOutputStream out = new ByteArrayOutputStream(); new AASXSerializer().write(env, fileList, out); Note The given filepath is relative to the .aasx package root and has to correspondent to the relative path given in the File - SubmodelElement that points to this file. Constraint Validation According to the AAS specification in \"Details of The Asset Administration Shell\", there are a number of constraints a valid model has to fulfill. The java-model implementation allows the creation of models that are not valid according to these constraints. The java-dataformat library contains a validation module to test them. The following snippet shows a submodel with an invalid idShort. Therefore, this snippet will throw a ValidationException . Referable invalidReferable = new DefaultSubmodel.Builder() .identification( new DefaultIdentifier.Builder().identifier(\"submodel\").idType(IdentifierType.CUSTOM).build()) .idShort(\"_idShort\") .build(); ShaclValidator.getInstance().validate(invalidReferable);"
  },
  "index.html": {
    "href": "index.html",
    "title": "Devdoc for the AAS Java Serializer | java-serializer Documentation",
    "keywords": "Devdoc for the AAS Java Serializer This is the documentation for the contributors and developers of AAS Java Serializer. For the general introduction and the description of the tool, please see the Github repository: https://github.com/admin-shell-io/java-serializer . Getting Started explains how to use the library and submit contributions."
  }
}